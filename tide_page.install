<?php

/**
 * @file
 * Tide Page install.
 */

use Drupal\workflows\Entity\Workflow;
use Drupal\search_api\Item\Field;

/**
 * Implements hook_install().
 */
function tide_page_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'page');
      $editorial_workflow->save();
    }
  }

  // Add relevant fields to search API index.
  _tide_page_add_fields_search_api();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_page_update_dependencies() {
  $dependencies['tide_page'][8001] = ['tide_core' => 8001];
  $dependencies['tide_page'][8002] = ['tide_core' => 8002];
  return $dependencies;
}

/**
 * Refactor Show Related Content and Show Social Sharing fields.
 */
function tide_page_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  _tide_import_single_config('field.field.node.page.field_show_related_content', $config_location);
  _tide_import_single_config('field.field.node.page.field_show_social_sharing', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      $data_changed = FALSE;
      if ($node->hasField('field_show_related_content') && $node->hasField('field_page_show_related')) {
        $node->set('field_show_related_content', $node->get('field_page_show_related'));
        $data_changed = TRUE;
      }
      if ($node->hasField('field_show_social_sharing') && $node->hasField('field_page_show_social')) {
        $node->set('field_show_social_sharing', $node->get('field_page_show_social'));
        $data_changed = TRUE;
      }
      if ($data_changed) {
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Refactor Featured Image field.
 */
function tide_page_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  _tide_import_single_config('field.field.node.page.field_featured_image', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_featured_image') && $node->hasField('field_page_feature_image')) {
        $node->set('field_featured_image', $node->get('field_page_feature_image'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Add fields to search API.
 */
function _tide_page_add_fields_search_api() {

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index the Intro field.
    $field_page_intro = new Field($index, 'field_page_intro_text');
    $field_page_intro->setType('text');
    $field_page_intro->setPropertyPath('field_page_intro_text');
    $field_page_intro->setDatasourceId('entity:node');
    $field_page_intro->setLabel('Introduction text');
    $index->addField($field_page_intro);

    $index->save();
  }
}
