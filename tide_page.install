<?php

/**
 * @file
 * Tide Page install.
 */

use Drupal\workflows\Entity\Workflow;
use Drupal\search_api\Item\Field;
use Drupal\node\Entity\Node;

/**
 * Implements hook_install().
 */
function tide_page_install() {
  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'page');
      $editorial_workflow->save();
    }
  }

  // Add relevant fields to search API index.
  _tide_page_add_fields_search_api();

  // Enable entity type/bundles for use with scheduled transitions.
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'page'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function tide_page_update_dependencies() {
  $dependencies['tide_page'][8001] = ['tide_core' => 8001];
  $dependencies['tide_page'][8002] = ['tide_core' => 8002];
  return $dependencies;
}

/**
 * Refactor Show Related Content and Show Social Sharing fields.
 */
function tide_page_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  _tide_import_single_config('field.field.node.page.field_show_related_content', $config_location);
  _tide_import_single_config('field.field.node.page.field_show_social_sharing', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      $data_changed = FALSE;
      if ($node->hasField('field_show_related_content') && $node->hasField('field_page_show_related')) {
        $node->set('field_show_related_content', $node->get('field_page_show_related'));
        $data_changed = TRUE;
      }
      if ($node->hasField('field_show_social_sharing') && $node->hasField('field_page_show_social')) {
        $node->set('field_show_social_sharing', $node->get('field_page_show_social'));
        $data_changed = TRUE;
      }
      if ($data_changed) {
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Refactor Featured Image field.
 */
function tide_page_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  _tide_import_single_config('field.field.node.page.field_featured_image', $config_location);

  $pages = \Drupal::entityTypeManager()->getStorage('node')
    ->loadByProperties(['type' => 'page']);
  if ($pages && count($pages)) {
    /** @var \Drupal\node\Entity\Node $node */
    foreach ($pages as $node) {
      if ($node->hasField('field_featured_image') && $node->hasField('field_page_feature_image')) {
        $node->set('field_featured_image', $node->get('field_page_feature_image'));
        $node->setNewRevision(FALSE);
        $node->save();
      }
    }
  }
}

/**
 * Add fields to search API.
 */
function _tide_page_add_fields_search_api() {

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    $index = $index_storage->load('node');

    // Index the Intro field.
    $field_page_intro = new Field($index, 'field_page_intro_text');
    $field_page_intro->setType('text');
    $field_page_intro->setPropertyPath('field_page_intro_text');
    $field_page_intro->setDatasourceId('entity:node');
    $field_page_intro->setLabel('Introduction text');
    $index->addField($field_page_intro);

    $index->save();
  }
}

/**
 * Add field_show_topic_term_and_tags.
 */
function tide_page_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  _tide_import_single_config('field.field.node.page.field_show_topic_term_and_tags', $config_location);
}

/**
 * Updates field_show_topic_term_and_tags default value for current page nodes.
 */
function tide_page_update_8004(&$sandbox) {
  if (!isset($sandbox['total'])) {
    if ($count = \Drupal::entityQuery('node')
      ->condition('type', 'page')
      ->count()
      ->execute()) {
      $sandbox['total'] = $count;
      $sandbox['current'] = 0;
      $sandbox['#finished'] = $count ? 0 : 1;
    }
    else {
      return;
    }
  }
  $batch = 10;
  $page_ids = \Drupal::entityQuery('node')
    ->condition('type', 'page')
    ->range($sandbox['current'], $batch)
    ->execute();
  foreach ($page_ids as $page_id) {
    $page_node = Node::load($page_id);
    if ($page_node->hasField('field_show_topic_term_and_tags')) {
      $page_node->set('field_show_topic_term_and_tags', 1);
      $page_node->save();
    }
    $sandbox['current']++;
  }
  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_page_update_8005() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'page'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Add field display headings for table of contents.
 */
function tide_page_update_8006() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_page') . '/config/install'];
  $new_field = 'field.field.node.page.field_node_display_headings';
  $config_read = _tide_read_config($new_field, $config_location, TRUE);
  // Obtain the storage manager for field instances.
  // Create a new field instance from the yaml configuration and save.
  \Drupal::entityManager()->getStorage('field_config')
    ->create($config_read)
    ->save();

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.node.page.default');

  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.field.node.page.field_node_display_headings', $dependencies)) {
    $dependencies[] = 'field.field.node.page.field_node_display_headings';
    $config->set('dependencies.config', $dependencies);
  }

  $third_party_settings = $config->get('third_party_settings.field_group.group_other.children');
  if (!isset($third_party_settings['field_node_display_headings'])) {
    $third_party_settings = [
      'field_show_social_sharing',
      'field_show_content_rating',
      'field_show_table_of_content',
      'field_node_display_headings',
    ];
    $config->set('third_party_settings.field_group.group_other.children', $third_party_settings);
  }
  $table_of_content_weight = $config->get('content.field_show_table_of_content.weight');
  $content = $config->get('content');
  if (!isset($content['field_node_display_headings'])) {
    $content['field_node_display_headings'] = [
      'weight' => $table_of_content_weight + 1,
      'settings' => [],
      'third_party_settings' => [],
      'type' => 'options_buttons',
      'region' => 'content',
    ];
    $config->set('content', $content);
  }

  $config->save();

  // Add to JSON
  $json_config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.node--page');

  $json_content = $json_config->get('resourceFields');
  if (!isset($json_content['field_node_display_headings'])) {
    $json_content['field_node_display_headings'] = [
      'fieldName' => 'field_node_display_headings',
      'publicName' => 'field_node_display_headings',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
    ];

    $json_config->set('resourceFields', $json_content);
  }

  $config->save();

  // Update show table of content label.
  $field_config = $config_factory->getEditable('field.field.node.page.field_show_table_of_content');
  $description = 'The table of contents is automatically built from the heading structure of your page.';
  $field_config->set('description', $description);
  $field_config->save();
}